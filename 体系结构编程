/*aarch64-linux-gnu-g++ -static -o hello_arm hello.cpp
qemu-aarch64 ./hello_arm*/
#include <iostream>
using namespace std;
#include <sys/time.h>
double get_time() {
    struct timeval t;
    gettimeofday(&t, NULL);
    return t.tv_sec + t.tv_usec * 1e-6;  // 返回秒级时间
}
int main() {
    int c = 10;
    int n=10000;
   // 动态分配内存
   int* sum = new int[n];
   int** matrix = new int*[n];
   for (int i = 0; i < n; i++) {
       matrix[i] = new int[n];
   }
   int* a = new int[n];
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            matrix[i][j]=1;
        }
    }
    for(int i=0;i<n;i++)a[i]=1;
    double start = get_time();
    //平凡算法
    for (int i = 0; i < c; i++) {
        for(int i=0;i<n;i++){
            sum[i]=0;
            for(int j=0;j<n;j++){
                sum[i]+=matrix[j][i]*a[j];
            }
        }
    }
    double end = get_time();
cout<<"n="<<n<<endl;
cout<<"重复次数"<<c<<endl;
    cout << "平凡算法" << endl
         << "总时间: " << (end - start) << " 秒" << endl
         << "每次计算时间: " << (end - start) / c << " 秒" << endl;

    double start_cache = get_time();
    //优化算法
    for (int rep = 0; rep < c; rep++) {
        for (int i = 0; i < n; i++) sum[i] = 0; // 初始化sum
        for (int j = 0; j < n; j++) {          // 外层j循环
            for (int i = 0; i < n; i++) {      // 内层i循环
                sum[i] += matrix[j][i] * a[j]; // 按行访问matrix[j][i]
            }
        }
    }
    double end_cache = get_time();

    cout << "优化算法" << endl
         << "总时间: " << (end_cache - start_cache) << " 秒" << endl
         << "每次计算时间: " << (end_cache - start_cache) / c << " 秒" << endl;

}
